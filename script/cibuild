#!/usr/bin/env ruby

# script/cibuild: Build and deploy the current version branch. This is primarily
#                 designed to run on the continuous integration server.

require 'yaml'

# define some handy string formatting
class String
  def black;          "\033[30m#{self}\033[0m" end
  def red;            "\033[31m#{self}\033[0m" end
  def green;          "\033[32m#{self}\033[0m" end
  def yellow;          "\033[33m#{self}\033[0m" end
  def magenta;        "\033[35m#{self}\033[0m" end
  def cyan;           "\033[36m#{self}\033[0m" end
  def grey;           "\033[37m#{self}\033[0m" end
  def success;        "\u2713 ".encode('utf-8') + self end
  def failure;        "\u2717 ".encode('utf-8') + self end
  def wut;        "\u271D ".encode('utf-8') + self end

  def bold;           "\e[1m#{self}\e[22m" end
  def italic;         "\e[3m#{self}\e[23m" end
  def underline;      "\e[4m#{self}\e[24m" end
  def blink;          "\e[5m#{self}\e[25m" end
  def reverse_color;  "\e[7m#{self}\e[27m" end
end

# # # # # # #
# CONFIGURE #
# # # # # # #

# what's your name, branch?
branch = ENV['TRAVIS_BRANCH'] || `git rev-parse --abbrev-ref HEAD`.strip

puts "You're on the #{branch.underline} branch"

# get branches that count as "versions" from _config.yml
config = YAML.load_file('_config.yml')

# check for "versions" key
if not config.include? "versions"
  puts "ERROR: No 'versions' key in _config.yml".red
  exit 1
end

version_branches = config['versions']['branches']

# is this the stable branch?
stable_branch = config['versions']['stable']&.to_s || "master"
is_stable = branch == stable_branch
puts "The #{branch.underline} branch is the #{"stable branch".green}" if is_stable

# is this a version branch? (stable can't also be a version branch!)
is_version = version_branches.map { |x| x.to_s }.include?(branch) && (not is_stable)
puts "The #{branch.underline} branch is a #{"version branch".green}" if is_version

# abort if we're not on a recognised branch
if not (is_stable or is_version)
  puts "WARNING: Uh oh, #{branch.underline} is not a recognised branch!".red
  if ENV['CI'] == "true"
    puts "Checking for errors in the site (but not deploying)..."
    puts `bundle exec jekyll build`.cyan
    exit $?.exitstatus
  else
    exit 120
  end
end

# get sha and check if working dir is dirty (shouldn't be the case if using CI)
sha = `git rev-parse --verify --short HEAD`.strip
dirty = `git status --porcelain` != ""
puts `git status --porcelain`

# set branch dir (branch name, unless 'master', in which case 'wip')
branch_dir = branch == 'master' ? 'wip' : branch

# load secondary (dev) config file, if possible
config_ci_path = '_config_ci.yml'
config_ci = File.exists?(config_ci_path) ? YAML.load_file(config_ci_path) : {}

# determine baseurl
baseurl = baseurl_orig = config['baseurl'] || '' # original baseurl
baseurl.chomp! '/'
baseurl += "/#{branch_dir}" if is_version

# add some extra keys to secondary config
config_ci['git_branch'] = branch
config_ci['baseurl'] = baseurl
config_ci['baseurl_orig'] = baseurl_orig
File.open(config_ci_path, 'w') {|f| f.write config_ci.to_yaml }

# build directory: "path" is the branch build dir, whereas "base_path" is the
# root build dir (if branch is current/stable then path == base_path)
path = base_path = "_site"

# remove root build directory before we begin
`rm -rf "#{base_path}"`

# set path
path += "/#{branch_dir}" if is_version

# replace 'master' with 'wip' in version_branches list (for later)
version_branch_dirs = version_branches.map { |x| x == 'master' ? 'wip' : x}

# # # # #
# BUILD #
# # # # #

puts "WARNING: Dirty working directory!".red if dirty

puts "Building #{sha}#{"+" if dirty} (#{branch.underline}) in #{path.magenta}!"

# ensure the branch build directory exists
`mkdir -p #{path}`

# build the site
puts `bundle exec jekyll build -d #{path} --config _config.yml,_config_ci.yml`.cyan
# NOTE: _config_ci.yml contains custom baseurl

if $?.exitstatus > 0
  puts "ERROR: Jekyll failed to build the site... :(".red
  exit 3
end

# # # # # #
# DEPLOY! #
# # # # # #

# enter build directory...
puts "Entering root build dir: #{base_path.magenta}"
Dir.chdir(base_path)

# check if the builder is CI
if ENV['CI'] != "true"
  puts "WARNING: You're not a robot! (Expected $CI == true, got #{ENV['CI']}.)".red.underline
  exit 128
end

remote = `git config remote.origin.url`.strip
remote_auth = remote.sub "https://github.com/", "git@github.com:"
puts "Deploying to #{remote.yellow} (production)"

# intialise git repo
puts `git init`.cyan

# setup the git user
user = {
  name: ENV['GITHUB_USER_NAME'] || "Bozo",
  email: ENV['GITHUB_USER_EMAIL'] || "bozo@mcneel.com"
}

# inside this git repo we'll pretend to be a new user
puts "Configuring user: #{user.to_s.yellow}"
`git config user.name "#{user[:name]}"`
`git config user.email "#{user[:email]}"`

production = "production" # remote name

# add remote git repo
`git remote add #{production} #{remote} 2>&1` # suppress

# fetch and reset
puts "Fetching remote: #{production.yellow}"
puts `git fetch --depth=1 #{production} 2>&1`.cyan

if $?.exitstatus > 0
  puts "ERROR: Failed to contact github... :(".red
  exit 5
end

deploy_branch = ENV['GITHUB_PAGES_BRANCH'] || "gh-pages"
puts "Checking out branch: #{deploy_branch.yellow}"
puts `git reset -q #{production}/#{deploy_branch}`.cyan

if is_stable
  # revert version branch directories so they don't get staged
  # NOTE: Watch out! This also has the effect of removing any versions that are
  # no longer listed in versions.branches
  puts "Reverting version branch directories: #{version_branch_dirs.join(", ").magenta}"
  version_branch_dirs.each do |b|
    co = `git checkout -q -- #{b} 2>&1`.strip
    puts co.cyan if not co.empty?
  end

  # ensure .nojekyll file persists between deploys
  # this tells github just to serve the site as-is and prevents any funny
  # behaviour when directories have underscores
  File.write(".nojekyll", "")

  # stage and commit
  `git add -A .`
  # puts `git status -s` # debug
  puts "Committing staged changes"
  puts `git commit -m "Deploy #{sha}#{"+" if dirty} (default: #{branch})"`.cyan
else
  # stage and commit (branch directory only)
  `git add -A #{branch_dir}`
  # puts `git status -s #{branch_dir}` # debug
  puts "Committing staged changes"
  puts `git commit -m "Deploy #{sha}#{"+" if dirty} (#{branch})"`.cyan
end

# exit if commit failed
(puts "WARNING: Commit failed. Probably empty!".red; exit) if $?.exitstatus > 0

# deploy
puts "Pushing commit: #{`git rev-parse --verify --short HEAD`.rstrip.yellow}"
puts `git push -n #{production} HEAD:#{deploy_branch}`.cyan # stderr, whatever
exit $?.exitstatus
